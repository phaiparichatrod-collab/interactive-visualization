import React, { useEffect, useRef } from "react";
import { useQuery, gql } from "@apollo/client";
import * as d3 from "d3";

// üß† GraphQL Query: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï
const GET_VOTES = gql`
  query {
    bills(limit: 10) {
      id
      title
      votes {
        decision
        person {
          id
          name
          party {
            id
            name
          }
        }
      }
    }
  }
`;

const VoteNetworkGraph = () => {
  const svgRef = useRef();
  const { loading, error, data } = useQuery(GET_VOTES);

  useEffect(() => {
    if (loading || error || !data) return;

    // üß© ‡∏™‡∏£‡πâ‡∏≤‡∏á nodes ‡πÅ‡∏•‡∏∞ links ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    const bills = data.bills;
    const nodesMap = new Map();
    const links = [];

    bills.forEach((bill) => {
      nodesMap.set(bill.id, { id: bill.id, label: bill.title, type: "bill" });

      bill.votes.forEach((vote) => {
        const person = vote.person;
        if (!person) return;

        nodesMap.set(person.id, {
          id: person.id,
          label: person.name,
          type: "person",
        });

        if (person.party) {
          nodesMap.set(person.party.id, {
            id: person.party.id,
            label: person.party.name,
            type: "party",
          });

          // link: ‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‚Üí ‡∏û‡∏£‡∏£‡∏Ñ
          links.push({
            source: person.id,
            target: person.party.id,
            type: "affiliation",
            weight: 1,
          });
        }

        // link: ‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‚Üí ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
        links.push({
          source: person.id,
          target: bill.id,
          type: vote.decision,
          weight: 1,
        });
      });
    });

    const nodes = Array.from(nodesMap.values());

    // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á SVG
    const width = 900;
    const height = 600;
    d3.select(svgRef.current).selectAll("*").remove();
    const svg = d3
      .select(svgRef.current)
      .attr("viewBox", [0, 0, width, height])
      .style("background", "#f9f9f9");

    // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á simulation
    const simulation = d3
      .forceSimulation(nodes)
      .force(
        "link",
        d3
          .forceLink(links)
          .id((d) => d.id)
          .distance(120)
      )
      .force("charge", d3.forceManyBody().strength(-250))
      .force("center", d3.forceCenter(width / 2, height / 2));

    // üîπ ‡πÄ‡∏™‡πâ‡∏ô link
    const link = svg
      .append("g")
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.6)
      .selectAll("line")
      .data(links)
      .join("line")
      .attr("stroke-width", (d) => Math.sqrt(d.weight))
      .attr("stroke", (d) =>
        d.type === "‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö"
          ? "#4caf50"
          : d.type === "‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö"
          ? "#f44336"
          : "#999"
      );

    // üîπ ‡∏™‡∏µ node
    const color = (type) => {
      if (type === "person") return "#1f77b4";
      if (type === "party") return "#ff9800";
      if (type === "bill") return "#4caf50";
      return "#ccc";
    };

    // üîπ Node
    const node = svg
      .append("g")
      .selectAll("circle")
      .data(nodes)
      .join("circle")
      .attr("r", 15)
      .attr("fill", (d) => color(d.type))
      .call(
        d3
          .drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended)
      );

    // üîπ Label
    const labels = svg
      .append("g")
      .selectAll("text")
      .data(nodes)
      .join("text")
      .text((d) => d.label)
      .attr("font-size", 10)
      .attr("dx", 18)
      .attr("dy", 4);

    simulation.on("tick", () => {
      link
        .attr("x1", (d) => d.source.x)
        .attr("y1", (d) => d.source.y)
        .attr("x2", (d) => d.target.x)
        .attr("y2", (d) => d.target.y);

      node.attr("cx", (d) => d.x).attr("cy", (d) => d.y);
      labels.attr("x", (d) => d.x).attr("y", (d) => d.y);
    });

    function dragstarted(event, d) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }
    function dragged(event, d) {
      d.fx = event.x;
      d.fy = event.y;
    }
    function dragended(event, d) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  }, [data, loading, error]);

  if (loading) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  if (error) return <p>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error.message}</p>;

  return (
    <div style={{ textAlign: "center" }}>
      <h2>‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏°‡∏ï‡∏¥‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á ‡∏™.‡∏™.</h2>
      <svg ref={svgRef} width="100%" height="600"></svg>
      <p style={{ fontSize: "0.9rem", color: "#777" }}>
        ‡∏™‡∏µ node:
        <br />üü¢ ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢ | üîµ ‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á | üü† ‡∏û‡∏£‡∏£‡∏Ñ
        <br />
        ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö, ‡πÅ‡∏î‡∏á = ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö
      </p>
    </div>
  );
};

export default VoteNetworkGraph;
